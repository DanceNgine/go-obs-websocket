package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// HeartbeatEvent : Emitted every 2 seconds after enabling it by calling SetHeartbeat.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#heartbeat
type HeartbeatEvent struct {
	Pulse             bool   `json:"pulse"`               // Toggles between every JSON meassage as an "I am alive" indicator.
	CurrentProfile    string `json:"current-profile"`     // Current active profile. Optional.
	CurrentScene      string `json:"current-scene"`       // Current active scene. Optional.
	Streaming         bool   `json:"streaming"`           // Current streaming state. Optional.
	TotalStreamTime   int    `json:"total-stream-time"`   // Total time (in seconds) since the stream started. Optional.
	TotalStreamBytes  int    `json:"total-stream-bytes"`  // Total bytes sent since the stream started. Optional.
	TotalStreamFrames int    `json:"total-stream-frames"` // Total frames streamed since the stream started. Optional.
	Recording         bool   `json:"recording"`           // Current recording state. Optional.
	TotalRecordTime   int    `json:"total-record-time"`   // Total time (in seconds) since recording started. Optional.
	TotalRecordBytes  int    `json:"total-record-bytes"`  // Total bytes recorded since the recording started. Optional.
	TotalRecordFrames int    `json:"total-record-frames"` // Total frames recorded since the recording started. Optional.
	_event
}

// Type returns the event's update type.
func (e HeartbeatEvent) Type() string { return e.UpdateType }

// StreamTC returns the event's stream timecode.
func (e HeartbeatEvent) StreamTC() string { return e.StreamTimecode }

// RecTC returns the event's recording timecode.
func (e HeartbeatEvent) RecTC() string { return e.RecTimecode }
