package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// StreamStartingEvent : A request to start streaming has been issued. Since: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#streamstarting
type StreamStartingEvent struct {
	PreviewOnly bool `json:"preview-only"` // Always false (retrocompatibility).
	_event
}

// Type returns the event's update type.
func (e StreamStartingEvent) Type() string { return e.UpdateType }

// StreamTC returns the event's stream timecode.
func (e StreamStartingEvent) StreamTC() string { return e.StreamTimecode }

// RecTC returns the event's recording timecode.
func (e StreamStartingEvent) RecTC() string { return e.RecTimecode }

// StreamStartedEvent : Streaming started successfully. Since: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#streamstarted
type StreamStartedEvent _event

// Type returns the event's update type.
func (e StreamStartedEvent) Type() string { return e.UpdateType }

// StreamTC returns the event's stream timecode.
func (e StreamStartedEvent) StreamTC() string { return e.StreamTimecode }

// RecTC returns the event's recording timecode.
func (e StreamStartedEvent) RecTC() string { return e.RecTimecode }

// StreamStoppingEvent : A request to stop streaming has been issued. Since: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#streamstopping
type StreamStoppingEvent struct {
	PreviewOnly bool `json:"preview-only"` // Always false (retrocompatibility).
	_event
}

// Type returns the event's update type.
func (e StreamStoppingEvent) Type() string { return e.UpdateType }

// StreamTC returns the event's stream timecode.
func (e StreamStoppingEvent) StreamTC() string { return e.StreamTimecode }

// RecTC returns the event's recording timecode.
func (e StreamStoppingEvent) RecTC() string { return e.RecTimecode }

// StreamStoppedEvent : Streaming stopped successfully. Since: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#streamstopped
type StreamStoppedEvent _event

// Type returns the event's update type.
func (e StreamStoppedEvent) Type() string { return e.UpdateType }

// StreamTC returns the event's stream timecode.
func (e StreamStoppedEvent) StreamTC() string { return e.StreamTimecode }

// RecTC returns the event's recording timecode.
func (e StreamStoppedEvent) RecTC() string { return e.RecTimecode }

// StreamStatusEvent : Emit every 2 seconds. Since: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#streamstatus
type StreamStatusEvent struct {
	Streaming        bool    `json:"streaming"`          // Current streaming state.
	Recording        bool    `json:"recording"`          // Current recording state.
	PreviewOnly      bool    `json:"preview-only"`       // Always false (retrocompatibility).
	BytesPerSec      int     `json:"bytes-per-sec"`      // Amount of data per second (in bytes) transmitted by the stream encoder.
	KbitsPerSec      int     `json:"kbits-per-sec"`      // Amount of data per second (in kilobits) transmitted by the stream encoder.
	Strain           float64 `json:"strain"`             // Percentage of dropped frames.
	TotalStreamTime  int     `json:"total-stream-time"`  // Total time (in seconds) since the stream started.
	NumTotalFrames   int     `json:"num-total-frames"`   // Total number of frames transmitted since the stream started.
	NumDroppedFrames int     `json:"num-dropped-frames"` // Number of frames dropped by the encoder since the stream started.
	Fps              float64 `json:"fps"`                // Current framerate.
	_event
}

// Type returns the event's update type.
func (e StreamStatusEvent) Type() string { return e.UpdateType }

// StreamTC returns the event's stream timecode.
func (e StreamStatusEvent) StreamTC() string { return e.StreamTimecode }

// RecTC returns the event's recording timecode.
func (e StreamStatusEvent) RecTC() string { return e.RecTimecode }
