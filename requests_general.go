package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// GetVersionRequest : Returns the latest version of the plugin and the API.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getversion
type GetVersionRequest struct{ _request }

// NewGetVersionRequest returns a new GetVersionRequest.
func NewGetVersionRequest() GetVersionRequest {
	return GetVersionRequest{_request{
		ID_:   getMessageID(),
		Type_: "GetVersion",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r GetVersionRequest) Send(c Client) (chan GetVersionResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetVersionResponse)
	go func() { future <- (<-generic).(GetVersionResponse) }()
	return future, nil
}

// GetVersionResponse : Response for GetVersionRequest.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getversion
type GetVersionResponse struct {
	// OBSRemote compatible API version.
	// Fixed to 1.1 for retrocompatibility.
	// Required: Yes.
	Version float64 `json:"version"`
	// obs-websocket plugin version.
	// Required: Yes.
	OBSWebsocketVersion string `json:"obs-websocket-version"`
	// OBS Studio program version.
	// Required: Yes.
	OBSStudioVersion string `json:"obs-studio-version"`
	// List of available request types, formatted as a comma-separated list string (e.g. : "Method1,Method2,Method3").
	// Required: Yes.
	AvailableRequests string `json:"available-requests"`
	_response         `json:",squash"`
}

// GetAuthRequiredRequest : Tells the client if authentication is required
// If so, returns authentication parameters `challenge`
// and `salt` (see "Authentication" for more information).
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getauthrequired
type GetAuthRequiredRequest struct{ _request }

// NewGetAuthRequiredRequest returns a new GetAuthRequiredRequest.
func NewGetAuthRequiredRequest() GetAuthRequiredRequest {
	return GetAuthRequiredRequest{_request{
		ID_:   getMessageID(),
		Type_: "GetAuthRequired",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r GetAuthRequiredRequest) Send(c Client) (chan GetAuthRequiredResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetAuthRequiredResponse)
	go func() { future <- (<-generic).(GetAuthRequiredResponse) }()
	return future, nil
}

// GetAuthRequiredResponse : Response for GetAuthRequiredRequest.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getauthrequired
type GetAuthRequiredResponse struct {
	// Indicates whether authentication is required.
	// Required: Yes.
	AuthRequired bool `json:"authRequired"`
	// Required: No.
	Challenge string `json:"challenge"`
	// Required: No.
	Salt      string `json:"salt"`
	_response `json:",squash"`
}

// AuthenticateRequest : Attempt to authenticate the client to the server.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#authenticate
type AuthenticateRequest struct {
	// Response to the auth challenge (see "Authentication" for more information).
	// Required: Yes.
	Auth     string `json:"auth"`
	_request `json:",squash"`
}

// NewAuthenticateRequest returns a new AuthenticateRequest.
func NewAuthenticateRequest(auth string) AuthenticateRequest {
	return AuthenticateRequest{
		auth,
		_request{
			ID_:   getMessageID(),
			Type_: "Authenticate",
		},
	}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r AuthenticateRequest) Send(c Client) (chan AuthenticateResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan AuthenticateResponse)
	go func() { future <- (<-generic).(AuthenticateResponse) }()
	return future, nil
}

// AuthenticateResponse : Response for AuthenticateRequest.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#authenticate
type AuthenticateResponse struct {
	_response `json:",squash"`
}

// SetHeartbeatRequest : Enable/disable sending of the Heartbeat event.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setheartbeat
type SetHeartbeatRequest struct {
	// Starts/Stops emitting heartbeat messages.
	// Required: Yes.
	Enable   bool `json:"enable"`
	_request `json:",squash"`
}

// NewSetHeartbeatRequest returns a new SetHeartbeatRequest.
func NewSetHeartbeatRequest(enable bool) SetHeartbeatRequest {
	return SetHeartbeatRequest{
		enable,
		_request{
			ID_:   getMessageID(),
			Type_: "SetHeartbeat",
		},
	}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r SetHeartbeatRequest) Send(c Client) (chan SetHeartbeatResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetHeartbeatResponse)
	go func() { future <- (<-generic).(SetHeartbeatResponse) }()
	return future, nil
}

// SetHeartbeatResponse : Response for SetHeartbeatRequest.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setheartbeat
type SetHeartbeatResponse struct {
	_response `json:",squash"`
}

// SetFilenameFormattingRequest : Set the filename formatting string.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setfilenameformatting
type SetFilenameFormattingRequest struct {
	// Filename formatting string to set.
	// Required: Yes.
	FilenameFormatting string `json:"filename-formatting"`
	_request           `json:",squash"`
}

// NewSetFilenameFormattingRequest returns a new SetFilenameFormattingRequest.
func NewSetFilenameFormattingRequest(filenameFormatting string) SetFilenameFormattingRequest {
	return SetFilenameFormattingRequest{
		filenameFormatting,
		_request{
			ID_:   getMessageID(),
			Type_: "SetFilenameFormatting",
		},
	}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r SetFilenameFormattingRequest) Send(c Client) (chan SetFilenameFormattingResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetFilenameFormattingResponse)
	go func() { future <- (<-generic).(SetFilenameFormattingResponse) }()
	return future, nil
}

// SetFilenameFormattingResponse : Response for SetFilenameFormattingRequest.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setfilenameformatting
type SetFilenameFormattingResponse struct {
	_response `json:",squash"`
}

// GetFilenameFormattingRequest : Get the filename formatting string.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getfilenameformatting
type GetFilenameFormattingRequest struct{ _request }

// NewGetFilenameFormattingRequest returns a new GetFilenameFormattingRequest.
func NewGetFilenameFormattingRequest() GetFilenameFormattingRequest {
	return GetFilenameFormattingRequest{_request{
		ID_:   getMessageID(),
		Type_: "GetFilenameFormatting",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r GetFilenameFormattingRequest) Send(c Client) (chan GetFilenameFormattingResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetFilenameFormattingResponse)
	go func() { future <- (<-generic).(GetFilenameFormattingResponse) }()
	return future, nil
}

// GetFilenameFormattingResponse : Response for GetFilenameFormattingRequest.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getfilenameformatting
type GetFilenameFormattingResponse struct {
	// Current filename formatting string.
	// Required: Yes.
	FilenameFormatting string `json:"filename-formatting"`
	_response          `json:",squash"`
}
