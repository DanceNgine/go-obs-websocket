package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// StartStopRecordingRequest : Toggle recording on or off.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#startstoprecording
type StartStopRecordingRequest struct{ _request }

// NewStartStopRecordingRequest returns a new StartStopRecordingRequest.
func NewStartStopRecordingRequest() StartStopRecordingRequest {
	return StartStopRecordingRequest{_request{
		ID_:   getMessageID(),
		Type_: "StartStopRecording",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r StartStopRecordingRequest) Send(c Client) (chan StartStopRecordingResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan StartStopRecordingResponse)
	go func() { future <- (<-generic).(StartStopRecordingResponse) }()
	return future, nil
}

// StartStopRecordingResponse : Response for StartStopRecordingRequest.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#startstoprecording
type StartStopRecordingResponse struct {
	_response `json:",squash"`
}

// StartRecordingRequest : Start recording.
// Will return an `error` if recording is already active.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#startrecording
type StartRecordingRequest struct{ _request }

// NewStartRecordingRequest returns a new StartRecordingRequest.
func NewStartRecordingRequest() StartRecordingRequest {
	return StartRecordingRequest{_request{
		ID_:   getMessageID(),
		Type_: "StartRecording",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r StartRecordingRequest) Send(c Client) (chan StartRecordingResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan StartRecordingResponse)
	go func() { future <- (<-generic).(StartRecordingResponse) }()
	return future, nil
}

// StartRecordingResponse : Response for StartRecordingRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#startrecording
type StartRecordingResponse struct {
	_response `json:",squash"`
}

// StopRecordingRequest : Stop recording.
// Will return an `error` if recording is not active.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#stoprecording
type StopRecordingRequest struct{ _request }

// NewStopRecordingRequest returns a new StopRecordingRequest.
func NewStopRecordingRequest() StopRecordingRequest {
	return StopRecordingRequest{_request{
		ID_:   getMessageID(),
		Type_: "StopRecording",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r StopRecordingRequest) Send(c Client) (chan StopRecordingResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan StopRecordingResponse)
	go func() { future <- (<-generic).(StopRecordingResponse) }()
	return future, nil
}

// StopRecordingResponse : Response for StopRecordingRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#stoprecording
type StopRecordingResponse struct {
	_response `json:",squash"`
}

// SetRecordingFolderRequest : Change the current recording folder.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setrecordingfolder
type SetRecordingFolderRequest struct {
	// Path of the recording folder.
	// Required: Yes.
	RecFolder string `json:"rec-folder"`
	_request  `json:",squash"`
}

// NewSetRecordingFolderRequest returns a new SetRecordingFolderRequest.
func NewSetRecordingFolderRequest(recFolder string) SetRecordingFolderRequest {
	return SetRecordingFolderRequest{
		recFolder,
		_request{
			ID_:   getMessageID(),
			Type_: "SetRecordingFolder",
		},
	}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r SetRecordingFolderRequest) Send(c Client) (chan SetRecordingFolderResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetRecordingFolderResponse)
	go func() { future <- (<-generic).(SetRecordingFolderResponse) }()
	return future, nil
}

// SetRecordingFolderResponse : Response for SetRecordingFolderRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setrecordingfolder
type SetRecordingFolderResponse struct {
	_response `json:",squash"`
}

// GetRecordingFolderRequest : Get the path of  the current recording folder.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getrecordingfolder
type GetRecordingFolderRequest struct{ _request }

// NewGetRecordingFolderRequest returns a new GetRecordingFolderRequest.
func NewGetRecordingFolderRequest() GetRecordingFolderRequest {
	return GetRecordingFolderRequest{_request{
		ID_:   getMessageID(),
		Type_: "GetRecordingFolder",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r GetRecordingFolderRequest) Send(c Client) (chan GetRecordingFolderResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetRecordingFolderResponse)
	go func() { future <- (<-generic).(GetRecordingFolderResponse) }()
	return future, nil
}

// GetRecordingFolderResponse : Response for GetRecordingFolderRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getrecordingfolder
type GetRecordingFolderResponse struct {
	// Path of the recording folder.
	// Required: Yes.
	RecFolder string `json:"rec-folder"`
	_response `json:",squash"`
}
