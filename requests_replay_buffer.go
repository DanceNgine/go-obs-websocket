package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// StartStopReplayBufferRequest : Toggle the Replay Buffer on/off.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#startstopreplaybuffer
type StartStopReplayBufferRequest struct{ _request }

// NewStartStopReplayBufferRequest returns a new StartStopReplayBufferRequest.
func NewStartStopReplayBufferRequest() StartStopReplayBufferRequest {
	return StartStopReplayBufferRequest{_request{
		ID_:   getMessageID(),
		Type_: "StartStopReplayBuffer",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r StartStopReplayBufferRequest) Send(c Client) (chan StartStopReplayBufferResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan StartStopReplayBufferResponse)
	go func() { future <- (<-generic).(StartStopReplayBufferResponse) }()
	return future, nil
}

// StartStopReplayBufferResponse : Response for StartStopReplayBufferRequest.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#startstopreplaybuffer
type StartStopReplayBufferResponse struct {
	_response `json:",squash"`
}

// StartReplayBufferRequest : Start recording into the Replay Buffer.
// Will return an `error` if the Replay Buffer is already active or if the
// "Save Replay Buffer" hotkey is not set in OBS' settings.
// Setting this hotkey is mandatory, even when triggering saves only
// through obs-websocket.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#startreplaybuffer
type StartReplayBufferRequest struct{ _request }

// NewStartReplayBufferRequest returns a new StartReplayBufferRequest.
func NewStartReplayBufferRequest() StartReplayBufferRequest {
	return StartReplayBufferRequest{_request{
		ID_:   getMessageID(),
		Type_: "StartReplayBuffer",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r StartReplayBufferRequest) Send(c Client) (chan StartReplayBufferResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan StartReplayBufferResponse)
	go func() { future <- (<-generic).(StartReplayBufferResponse) }()
	return future, nil
}

// StartReplayBufferResponse : Response for StartReplayBufferRequest.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#startreplaybuffer
type StartReplayBufferResponse struct {
	_response `json:",squash"`
}

// StopReplayBufferRequest : Stop recording into the Replay Buffer.
// Will return an `error` if the Replay Buffer is not active.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#stopreplaybuffer
type StopReplayBufferRequest struct{ _request }

// NewStopReplayBufferRequest returns a new StopReplayBufferRequest.
func NewStopReplayBufferRequest() StopReplayBufferRequest {
	return StopReplayBufferRequest{_request{
		ID_:   getMessageID(),
		Type_: "StopReplayBuffer",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r StopReplayBufferRequest) Send(c Client) (chan StopReplayBufferResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan StopReplayBufferResponse)
	go func() { future <- (<-generic).(StopReplayBufferResponse) }()
	return future, nil
}

// StopReplayBufferResponse : Response for StopReplayBufferRequest.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#stopreplaybuffer
type StopReplayBufferResponse struct {
	_response `json:",squash"`
}

// SaveReplayBufferRequest : Flush and save the contents of the Replay Buffer to disk
// This is
// basically the same as triggering the "Save Replay Buffer" hotkey.
// Will return an `error` if the Replay Buffer is not active.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#savereplaybuffer
type SaveReplayBufferRequest struct{ _request }

// NewSaveReplayBufferRequest returns a new SaveReplayBufferRequest.
func NewSaveReplayBufferRequest() SaveReplayBufferRequest {
	return SaveReplayBufferRequest{_request{
		ID_:   getMessageID(),
		Type_: "SaveReplayBuffer",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r SaveReplayBufferRequest) Send(c Client) (chan SaveReplayBufferResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SaveReplayBufferResponse)
	go func() { future <- (<-generic).(SaveReplayBufferResponse) }()
	return future, nil
}

// SaveReplayBufferResponse : Response for SaveReplayBufferRequest.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#savereplaybuffer
type SaveReplayBufferResponse struct {
	_response `json:",squash"`
}
