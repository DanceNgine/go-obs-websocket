package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// SetCurrentSceneCollectionRequest : Change the active scene collection.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setcurrentscenecollection
type SetCurrentSceneCollectionRequest struct {
	// Name of the desired scene collection.
	// Required: Yes.
	ScName   string `json:"sc-name"`
	_request `json:",squash"`
}

// NewSetCurrentSceneCollectionRequest returns a new SetCurrentSceneCollectionRequest.
func NewSetCurrentSceneCollectionRequest(scName string) SetCurrentSceneCollectionRequest {
	return SetCurrentSceneCollectionRequest{
		scName,
		_request{
			ID_:   getMessageID(),
			Type_: "SetCurrentSceneCollection",
		},
	}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r SetCurrentSceneCollectionRequest) Send(c Client) (chan SetCurrentSceneCollectionResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetCurrentSceneCollectionResponse)
	go func() { future <- (<-generic).(SetCurrentSceneCollectionResponse) }()
	return future, nil
}

// SetCurrentSceneCollectionResponse : Response for SetCurrentSceneCollectionRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setcurrentscenecollection
type SetCurrentSceneCollectionResponse struct {
	_response `json:",squash"`
}

// GetCurrentSceneCollectionRequest : Get the name of the current scene collection.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getcurrentscenecollection
type GetCurrentSceneCollectionRequest struct{ _request }

// NewGetCurrentSceneCollectionRequest returns a new GetCurrentSceneCollectionRequest.
func NewGetCurrentSceneCollectionRequest() GetCurrentSceneCollectionRequest {
	return GetCurrentSceneCollectionRequest{_request{
		ID_:   getMessageID(),
		Type_: "GetCurrentSceneCollection",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r GetCurrentSceneCollectionRequest) Send(c Client) (chan GetCurrentSceneCollectionResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetCurrentSceneCollectionResponse)
	go func() { future <- (<-generic).(GetCurrentSceneCollectionResponse) }()
	return future, nil
}

// GetCurrentSceneCollectionResponse : Response for GetCurrentSceneCollectionRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getcurrentscenecollection
type GetCurrentSceneCollectionResponse struct {
	// Name of the currently active scene collection.
	// Required: Yes.
	ScName    string `json:"sc-name"`
	_response `json:",squash"`
}

// ListSceneCollectionsRequest : List available scene collections.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#listscenecollections
type ListSceneCollectionsRequest struct{ _request }

// NewListSceneCollectionsRequest returns a new ListSceneCollectionsRequest.
func NewListSceneCollectionsRequest() ListSceneCollectionsRequest {
	return ListSceneCollectionsRequest{_request{
		ID_:   getMessageID(),
		Type_: "ListSceneCollections",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r ListSceneCollectionsRequest) Send(c Client) (chan ListSceneCollectionsResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan ListSceneCollectionsResponse)
	go func() { future <- (<-generic).(ListSceneCollectionsResponse) }()
	return future, nil
}

// ListSceneCollectionsResponse : Response for ListSceneCollectionsRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#listscenecollections
type ListSceneCollectionsResponse struct {
	// Scene collections list.
	// Required: Yes.
	SceneCollections interface{} `json:"scene-collections"`
	// Required: Yes.
	SceneCollectionsStar string `json:"scene-collections.*."`
	_response            `json:",squash"`
}
