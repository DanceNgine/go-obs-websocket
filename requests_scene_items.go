package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// GetSceneItemPropertiesRequest : Gets the scene specific properties of the specified source item.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsceneitemproperties
type GetSceneItemPropertiesRequest struct {
	// the name of the scene that the source item belongs to.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// The name of the source.
	// Required: Yes.
	Item     string `json:"item"`
	_request `json:",squash"`
}

// NewGetSceneItemPropertiesRequest returns a new GetSceneItemPropertiesRequest.
func NewGetSceneItemPropertiesRequest(
	sceneName string,
	item string,
) GetSceneItemPropertiesRequest {
	return GetSceneItemPropertiesRequest{
		sceneName,
		item,
		_request{
			MessageID:   getMessageID(),
			RequestType: "GetSceneItemProperties",
		},
	}

}

// ID returns the request's message ID.
func (r GetSceneItemPropertiesRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r GetSceneItemPropertiesRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetSceneItemPropertiesRequest) Send(c Client) (chan GetSceneItemPropertiesResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetSceneItemPropertiesResponse)
	go func() { future <- (<-generic).(GetSceneItemPropertiesResponse) }()
	return future, nil
}

// GetSceneItemPropertiesResponse : Response for GetSceneItemPropertiesRequest.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsceneitemproperties
type GetSceneItemPropertiesResponse struct {
	// The name of the source.
	// Required: Yes.
	Name string `json:"name"`
	// The x position of the source from the left.
	// Required: Yes.
	PositionX int `json:"position.x"`
	// The y position of the source from the top.
	// Required: Yes.
	PositionY int `json:"position.y"`
	// The point on the source that the item is manipulated from.
	// Required: Yes.
	PositionAlignment int `json:"position.alignment"`
	// The clockwise rotation of the item in degrees around the point of alignment.
	// Required: Yes.
	Rotation float64 `json:"rotation"`
	// The x-scale factor of the source.
	// Required: Yes.
	ScaleX float64 `json:"scale.x"`
	// The y-scale factor of the source.
	// Required: Yes.
	ScaleY float64 `json:"scale.y"`
	// The number of pixels cropped off the top of the source before scaling.
	// Required: Yes.
	CropTop int `json:"crop.top"`
	// The number of pixels cropped off the right of the source before scaling.
	// Required: Yes.
	CropRight int `json:"crop.right"`
	// The number of pixels cropped off the bottom of the source before scaling.
	// Required: Yes.
	CropBottom int `json:"crop.bottom"`
	// The number of pixels cropped off the left of the source before scaling.
	// Required: Yes.
	CropLeft int `json:"crop.left"`
	// If the source is visible.
	// Required: Yes.
	Visible bool `json:"visible"`
	// Type of bounding box.
	// Required: Yes.
	BoundsType string `json:"bounds.type"`
	// Alignment of the bounding box.
	// Required: Yes.
	BoundsAlignment int `json:"bounds.alignment"`
	// Width of the bounding box.
	// Required: Yes.
	BoundsX float64 `json:"bounds.x"`
	// Height of the bounding box.
	// Required: Yes.
	BoundsY   float64 `json:"bounds.y"`
	_response `json:",squash"`
}

// ID returns the response's message ID.
func (r GetSceneItemPropertiesResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r GetSceneItemPropertiesResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r GetSceneItemPropertiesResponse) Err() string { return r.Error }

// SetSceneItemPropertiesRequest : Sets the scene specific properties of a source
// Unspecified properties will remain unchanged.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemproperties
type SetSceneItemPropertiesRequest struct {
	// the name of the scene that the source item belongs to.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// The name of the source.
	// Required: Yes.
	Item string `json:"item"`
	// The new x position of the source.
	// Required: Yes.
	PositionX int `json:"position.x"`
	// The new y position of the source.
	// Required: Yes.
	PositionY int `json:"position.y"`
	// The new alignment of the source.
	// Required: Yes.
	PositionAlignment int `json:"position.alignment"`
	// The new clockwise rotation of the item in degrees.
	// Required: Yes.
	Rotation float64 `json:"rotation"`
	// The new x scale of the item.
	// Required: Yes.
	ScaleX float64 `json:"scale.x"`
	// The new y scale of the item.
	// Required: Yes.
	ScaleY float64 `json:"scale.y"`
	// The new amount of pixels cropped off the top of the source before scaling.
	// Required: Yes.
	CropTop int `json:"crop.top"`
	// The new amount of pixels cropped off the bottom of the source before scaling.
	// Required: Yes.
	CropBottom int `json:"crop.bottom"`
	// The new amount of pixels cropped off the left of the source before scaling.
	// Required: Yes.
	CropLeft int `json:"crop.left"`
	// The new amount of pixels cropped off the right of the source before scaling.
	// Required: Yes.
	CropRight int `json:"crop.right"`
	// The new visibility of the source.
	// 'true' shows source, 'false' hides source.
	// Required: Yes.
	Visible bool `json:"visible"`
	// The new bounds type of the source.
	// Required: Yes.
	BoundsType string `json:"bounds.type"`
	// The new alignment of the bounding box.
	// (0-2, 4-6, 8-10).
	// Required: Yes.
	BoundsAlignment int `json:"bounds.alignment"`
	// The new width of the bounding box.
	// Required: Yes.
	BoundsX float64 `json:"bounds.x"`
	// The new height of the bounding box.
	// Required: Yes.
	BoundsY  float64 `json:"bounds.y"`
	_request `json:",squash"`
}

// NewSetSceneItemPropertiesRequest returns a new SetSceneItemPropertiesRequest.
func NewSetSceneItemPropertiesRequest(
	sceneName string,
	item string,
	positionX int,
	positionY int,
	positionAlignment int,
	rotation float64,
	scaleX float64,
	scaleY float64,
	cropTop int,
	cropBottom int,
	cropLeft int,
	cropRight int,
	visible bool,
	boundsType string,
	boundsAlignment int,
	boundsX float64,
	boundsY float64,
) SetSceneItemPropertiesRequest {
	return SetSceneItemPropertiesRequest{
		sceneName,
		item,
		positionX,
		positionY,
		positionAlignment,
		rotation,
		scaleX,
		scaleY,
		cropTop,
		cropBottom,
		cropLeft,
		cropRight,
		visible,
		boundsType,
		boundsAlignment,
		boundsX,
		boundsY,
		_request{
			MessageID:   getMessageID(),
			RequestType: "SetSceneItemProperties",
		},
	}

}

// ID returns the request's message ID.
func (r SetSceneItemPropertiesRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r SetSceneItemPropertiesRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetSceneItemPropertiesRequest) Send(c Client) (chan SetSceneItemPropertiesResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetSceneItemPropertiesResponse)
	go func() { future <- (<-generic).(SetSceneItemPropertiesResponse) }()
	return future, nil
}

// SetSceneItemPropertiesResponse : Response for SetSceneItemPropertiesRequest.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemproperties
type SetSceneItemPropertiesResponse _response

// ID returns the response's message ID.
func (r SetSceneItemPropertiesResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r SetSceneItemPropertiesResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r SetSceneItemPropertiesResponse) Err() string { return r.Error }

// ResetSceneItemRequest : Reset a scene item.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#resetsceneitem
type ResetSceneItemRequest struct {
	// Name of the scene the source belogns to.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// Name of the source item.
	// Required: Yes.
	Item     string `json:"item"`
	_request `json:",squash"`
}

// NewResetSceneItemRequest returns a new ResetSceneItemRequest.
func NewResetSceneItemRequest(
	sceneName string,
	item string,
) ResetSceneItemRequest {
	return ResetSceneItemRequest{
		sceneName,
		item,
		_request{
			MessageID:   getMessageID(),
			RequestType: "ResetSceneItem",
		},
	}

}

// ID returns the request's message ID.
func (r ResetSceneItemRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r ResetSceneItemRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r ResetSceneItemRequest) Send(c Client) (chan ResetSceneItemResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan ResetSceneItemResponse)
	go func() { future <- (<-generic).(ResetSceneItemResponse) }()
	return future, nil
}

// ResetSceneItemResponse : Response for ResetSceneItemRequest.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#resetsceneitem
type ResetSceneItemResponse _response

// ID returns the response's message ID.
func (r ResetSceneItemResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r ResetSceneItemResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r ResetSceneItemResponse) Err() string { return r.Error }

// SetSceneItemRenderRequest : Show or hide a specified source item in a specified scene.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemrender
type SetSceneItemRenderRequest struct {
	// Scene item name in the specified scene.
	// Required: Yes.
	Source string `json:"source"`
	// true = shown ; false = hidden.
	// Required: Yes.
	Render bool `json:"render"`
	// Name of the scene where the source resides.
	// Defaults to the currently active scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	_request  `json:",squash"`
}

// NewSetSceneItemRenderRequest returns a new SetSceneItemRenderRequest.
func NewSetSceneItemRenderRequest(
	source string,
	render bool,
	sceneName string,
) SetSceneItemRenderRequest {
	return SetSceneItemRenderRequest{
		source,
		render,
		sceneName,
		_request{
			MessageID:   getMessageID(),
			RequestType: "SetSceneItemRender",
		},
	}

}

// ID returns the request's message ID.
func (r SetSceneItemRenderRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r SetSceneItemRenderRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetSceneItemRenderRequest) Send(c Client) (chan SetSceneItemRenderResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetSceneItemRenderResponse)
	go func() { future <- (<-generic).(SetSceneItemRenderResponse) }()
	return future, nil
}

// SetSceneItemRenderResponse : Response for SetSceneItemRenderRequest.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemrender
type SetSceneItemRenderResponse _response

// ID returns the response's message ID.
func (r SetSceneItemRenderResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r SetSceneItemRenderResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r SetSceneItemRenderResponse) Err() string { return r.Error }

// SetSceneItemPositionRequest : Sets the coordinates of a specified source item.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemposition
type SetSceneItemPositionRequest struct {
	// The name of the scene that the source item belongs to.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// The name of the source item.
	// Required: Yes.
	Item string `json:"item"`
	// X coordinate.
	// Required: Yes.
	X float64 `json:"x"`
	// Y coordinate.
	// Required: Yes.
	Y        float64 `json:"y"`
	_request `json:",squash"`
}

// NewSetSceneItemPositionRequest returns a new SetSceneItemPositionRequest.
func NewSetSceneItemPositionRequest(
	sceneName string,
	item string,
	x float64,
	y float64,
) SetSceneItemPositionRequest {
	return SetSceneItemPositionRequest{
		sceneName,
		item,
		x,
		y,
		_request{
			MessageID:   getMessageID(),
			RequestType: "SetSceneItemPosition",
		},
	}

}

// ID returns the request's message ID.
func (r SetSceneItemPositionRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r SetSceneItemPositionRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetSceneItemPositionRequest) Send(c Client) (chan SetSceneItemPositionResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetSceneItemPositionResponse)
	go func() { future <- (<-generic).(SetSceneItemPositionResponse) }()
	return future, nil
}

// SetSceneItemPositionResponse : Response for SetSceneItemPositionRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemposition
type SetSceneItemPositionResponse _response

// ID returns the response's message ID.
func (r SetSceneItemPositionResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r SetSceneItemPositionResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r SetSceneItemPositionResponse) Err() string { return r.Error }

// SetSceneItemTransformRequest : Set the transform of the specified source item.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemtransform
type SetSceneItemTransformRequest struct {
	// The name of the scene that the source item belongs to.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// The name of the source item.
	// Required: Yes.
	Item string `json:"item"`
	// Width scale factor.
	// Required: Yes.
	XScale float64 `json:"x-scale"`
	// Height scale factor.
	// Required: Yes.
	YScale float64 `json:"y-scale"`
	// Source item rotation (in degrees).
	// Required: Yes.
	Rotation float64 `json:"rotation"`
	_request `json:",squash"`
}

// NewSetSceneItemTransformRequest returns a new SetSceneItemTransformRequest.
func NewSetSceneItemTransformRequest(
	sceneName string,
	item string,
	xScale float64,
	yScale float64,
	rotation float64,
) SetSceneItemTransformRequest {
	return SetSceneItemTransformRequest{
		sceneName,
		item,
		xScale,
		yScale,
		rotation,
		_request{
			MessageID:   getMessageID(),
			RequestType: "SetSceneItemTransform",
		},
	}

}

// ID returns the request's message ID.
func (r SetSceneItemTransformRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r SetSceneItemTransformRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetSceneItemTransformRequest) Send(c Client) (chan SetSceneItemTransformResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetSceneItemTransformResponse)
	go func() { future <- (<-generic).(SetSceneItemTransformResponse) }()
	return future, nil
}

// SetSceneItemTransformResponse : Response for SetSceneItemTransformRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemtransform
type SetSceneItemTransformResponse _response

// ID returns the response's message ID.
func (r SetSceneItemTransformResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r SetSceneItemTransformResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r SetSceneItemTransformResponse) Err() string { return r.Error }

// SetSceneItemCropRequest : Sets the crop coordinates of the specified source item.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemcrop
type SetSceneItemCropRequest struct {
	// the name of the scene that the source item belongs to.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// The name of the source.
	// Required: Yes.
	Item string `json:"item"`
	// Pixel position of the top of the source item.
	// Required: Yes.
	Top int `json:"top"`
	// Pixel position of the bottom of the source item.
	// Required: Yes.
	Bottom int `json:"bottom"`
	// Pixel position of the left of the source item.
	// Required: Yes.
	Left int `json:"left"`
	// Pixel position of the right of the source item.
	// Required: Yes.
	Right    int `json:"right"`
	_request `json:",squash"`
}

// NewSetSceneItemCropRequest returns a new SetSceneItemCropRequest.
func NewSetSceneItemCropRequest(
	sceneName string,
	item string,
	top int,
	bottom int,
	left int,
	right int,
) SetSceneItemCropRequest {
	return SetSceneItemCropRequest{
		sceneName,
		item,
		top,
		bottom,
		left,
		right,
		_request{
			MessageID:   getMessageID(),
			RequestType: "SetSceneItemCrop",
		},
	}

}

// ID returns the request's message ID.
func (r SetSceneItemCropRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r SetSceneItemCropRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetSceneItemCropRequest) Send(c Client) (chan SetSceneItemCropResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetSceneItemCropResponse)
	go func() { future <- (<-generic).(SetSceneItemCropResponse) }()
	return future, nil
}

// SetSceneItemCropResponse : Response for SetSceneItemCropRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsceneitemcrop
type SetSceneItemCropResponse _response

// ID returns the response's message ID.
func (r SetSceneItemCropResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r SetSceneItemCropResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r SetSceneItemCropResponse) Err() string { return r.Error }
