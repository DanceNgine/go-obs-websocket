package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// SetCurrentSceneRequest : Switch to the specified scene.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setcurrentscene
type SetCurrentSceneRequest struct {
	// Name of the scene to switch to.
	// Required: Yes.
	SceneName string `json:"scene-name"`
	_request  `json:",squash"`
}

// NewSetCurrentSceneRequest returns a new SetCurrentSceneRequest.
func NewSetCurrentSceneRequest(sceneName string) SetCurrentSceneRequest {
	return SetCurrentSceneRequest{
		sceneName,
		_request{
			MessageID:   getMessageID(),
			RequestType: "SetCurrentScene",
		},
	}

}

// ID returns the request's message ID.
func (r SetCurrentSceneRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r SetCurrentSceneRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetCurrentSceneRequest) Send(c Client) (chan SetCurrentSceneResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetCurrentSceneResponse)
	go func() { future <- (<-generic).(SetCurrentSceneResponse) }()
	return future, nil
}

// SetCurrentSceneResponse : Response for SetCurrentSceneRequest.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setcurrentscene
type SetCurrentSceneResponse _response

// ID returns the response's message ID.
func (r SetCurrentSceneResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r SetCurrentSceneResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r SetCurrentSceneResponse) Err() string { return r.Error }

// GetCurrentSceneRequest : Get the current scene's name and source items.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getcurrentscene
type GetCurrentSceneRequest _request

// NewGetCurrentSceneRequest returns a new GetCurrentSceneRequest.
func NewGetCurrentSceneRequest() GetCurrentSceneRequest {
	return GetCurrentSceneRequest{MessageID: getMessageID(), RequestType: "GetCurrentScene"}
}

// ID returns the request's message ID.
func (r GetCurrentSceneRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r GetCurrentSceneRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetCurrentSceneRequest) Send(c Client) (chan GetCurrentSceneResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetCurrentSceneResponse)
	go func() { future <- (<-generic).(GetCurrentSceneResponse) }()
	return future, nil
}

// GetCurrentSceneResponse : Response for GetCurrentSceneRequest.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getcurrentscene
type GetCurrentSceneResponse struct {
	// Name of the currently active scene.
	// Required: Yes.
	Name string `json:"name"`
	// Ordered list of the current scene's source items.
	// Required: Yes.
	Sources   []map[string]interface{} `json:"sources"`
	_response `json:",squash"`
}

// ID returns the response's message ID.
func (r GetCurrentSceneResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r GetCurrentSceneResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r GetCurrentSceneResponse) Err() string { return r.Error }

// GetSceneListRequest : Get a list of scenes in the currently active profile.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getscenelist
type GetSceneListRequest _request

// NewGetSceneListRequest returns a new GetSceneListRequest.
func NewGetSceneListRequest() GetSceneListRequest {
	return GetSceneListRequest{MessageID: getMessageID(), RequestType: "GetSceneList"}
}

// ID returns the request's message ID.
func (r GetSceneListRequest) ID() string { return r.MessageID }

// Type returns the request's message type.
func (r GetSceneListRequest) Type() string { return r.RequestType }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetSceneListRequest) Send(c Client) (chan GetSceneListResponse, error) {
	generic, err := c.sendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetSceneListResponse)
	go func() { future <- (<-generic).(GetSceneListResponse) }()
	return future, nil
}

// GetSceneListResponse : Response for GetSceneListRequest.
// Since obs-websocket version: 0.3.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getscenelist
type GetSceneListResponse struct {
	// Name of the currently active scene.
	// Required: Yes.
	CurrentScene string `json:"current-scene"`
	// Ordered list of the current profile's scenes (See `[GetCurrentScene](#getcurrentscene)` for more information).
	// Required: Yes.
	Scenes    []map[string]interface{} `json:"scenes"`
	_response `json:",squash"`
}

// ID returns the response's message ID.
func (r GetSceneListResponse) ID() string { return r.MessageID }

// Stat returns the response's status.
func (r GetSceneListResponse) Stat() string { return r.Status }

// Err returns the response's error.
func (r GetSceneListResponse) Err() string { return r.Error }
