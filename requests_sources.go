package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// GetSourcesListRequest : List all sources available in the running OBS instance.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsourceslist
type GetSourcesListRequest _request

// NewGetSourcesListRequest returns a new GetSourcesListRequest.
func NewGetSourcesListRequest() GetSourcesListRequest {
	return GetSourcesListRequest{ID_: getMessageID(), Type_: "GetSourcesList"}
}

// ID returns the request's message ID.
func (r GetSourcesListRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r GetSourcesListRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetSourcesListRequest) Send(c Client) (chan GetSourcesListResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetSourcesListResponse)
	go func() { future <- (<-generic).(GetSourcesListResponse) }()
	return future, nil
}

// GetSourcesListResponse : Response for GetSourcesListRequest.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsourceslist
type GetSourcesListResponse struct {
	// Array of sources as objects.
	// Required: Yes.
	Sources []map[string]interface{} `json:"sources"`
	// Unique source name.
	// Required: Yes.
	SourcesName string `json:"sources.*.name"`
	// Non-unique source internal type (a.k.a type id).
	// Required: Yes.
	SourcesTypeID string `json:"sources.*.typeId"`
	// Source type.
	// Value is one of the following: "input", "filter", "transition", "scene" or "unknown".
	// Required: Yes.
	SourcesType string `json:"sources.*.type"`
	_response   `json:",squash"`
}

// ID returns the response's message ID.
func (r GetSourcesListResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r GetSourcesListResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r GetSourcesListResponse) Error() string { return r.Error_ }

// GetSourcesTypesListRequest : Get a list of all available sources types.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsourcestypeslist
type GetSourcesTypesListRequest _request

// NewGetSourcesTypesListRequest returns a new GetSourcesTypesListRequest.
func NewGetSourcesTypesListRequest() GetSourcesTypesListRequest {
	return GetSourcesTypesListRequest{ID_: getMessageID(), Type_: "GetSourcesTypesList"}
}

// ID returns the request's message ID.
func (r GetSourcesTypesListRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r GetSourcesTypesListRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetSourcesTypesListRequest) Send(c Client) (chan GetSourcesTypesListResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetSourcesTypesListResponse)
	go func() { future <- (<-generic).(GetSourcesTypesListResponse) }()
	return future, nil
}

// GetSourcesTypesListResponse : Response for GetSourcesTypesListRequest.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsourcestypeslist
type GetSourcesTypesListResponse struct {
	// Array of sources as objects.
	// Required: Yes.
	IDs []map[string]interface{} `json:"ids"`
	// Non-unique internal source type ID.
	// Required: Yes.
	IDsTypeID string `json:"ids.*.typeId"`
	// Display name of the source type.
	// Required: Yes.
	IDsDisplayName string `json:"ids.*.displayName"`
	// Type.
	// Value is one of the following: "input", "filter", "transition" or "other".
	// Required: Yes.
	IDsType string `json:"ids.*.type"`
	// Default settings of this source type.
	// Required: Yes.
	IDsDefaultSettings map[string]interface{} `json:"ids.*.defaultSettings"`
	// Source type capabilities.
	// Required: Yes.
	IDsCaps map[string]interface{} `json:"ids.*.caps"`
	// True if source of this type provide frames asynchronously.
	// Required: Yes.
	IDsCapsIsAsync bool `json:"ids.*.caps.isAsync"`
	// True if sources of this type provide video.
	// Required: Yes.
	IDsCapsHasVideo bool `json:"ids.*.caps.hasVideo"`
	// True if sources of this type provide audio.
	// Required: Yes.
	IDsCapsHasAudio bool `json:"ids.*.caps.hasAudio"`
	// True if interaction with this sources of this type is possible.
	// Required: Yes.
	IDsCapsCanInteract bool `json:"ids.*.caps.canInteract"`
	// True if sources of this type composite one or more sub-sources.
	// Required: Yes.
	IDsCapsIsComposite bool `json:"ids.*.caps.isComposite"`
	// True if sources of this type should not be fully duplicated.
	// Required: Yes.
	IDsCapsDoNotDuplicate bool `json:"ids.*.caps.doNotDuplicate"`
	// True if sources of this type may cause a feedback loop if it's audio is monitored and shouldn't be.
	// Required: Yes.
	IDsCapsDoNotSelfMonitor bool `json:"ids.*.caps.doNotSelfMonitor"`
	_response               `json:",squash"`
}

// ID returns the response's message ID.
func (r GetSourcesTypesListResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r GetSourcesTypesListResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r GetSourcesTypesListResponse) Error() string { return r.Error_ }

// GetVolumeRequest : Get the volume of the specified source.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getvolume
type GetVolumeRequest struct {
	// Name of the source.
	// Required: Yes.
	Source   string `json:"source"`
	_request `json:",squash"`
}

// NewGetVolumeRequest returns a new GetVolumeRequest.
func NewGetVolumeRequest(source string) GetVolumeRequest {
	return GetVolumeRequest{
		source,
		_request{
			ID_:   getMessageID(),
			Type_: "GetVolume",
		},
	}

}

// ID returns the request's message ID.
func (r GetVolumeRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r GetVolumeRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetVolumeRequest) Send(c Client) (chan GetVolumeResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetVolumeResponse)
	go func() { future <- (<-generic).(GetVolumeResponse) }()
	return future, nil
}

// GetVolumeResponse : Response for GetVolumeRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getvolume
type GetVolumeResponse struct {
	// Name of the source.
	// Required: Yes.
	Name string `json:"name"`
	// Volume of the source.
	// Between `0.0` and `1.0`.
	// Required: Yes.
	Volume float64 `json:"volume"`
	// Indicates whether the source is muted.
	// Required: Yes.
	Mute      bool `json:"mute"`
	_response `json:",squash"`
}

// ID returns the response's message ID.
func (r GetVolumeResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r GetVolumeResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r GetVolumeResponse) Error() string { return r.Error_ }

// SetVolumeRequest : Set the volume of the specified source.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setvolume
type SetVolumeRequest struct {
	// Name of the source.
	// Required: Yes.
	Source string `json:"source"`
	// Desired volume.
	// Must be between `0.0` and `1.0`.
	// Required: Yes.
	Volume   float64 `json:"volume"`
	_request `json:",squash"`
}

// NewSetVolumeRequest returns a new SetVolumeRequest.
func NewSetVolumeRequest(
	source string,
	volume float64,
) SetVolumeRequest {
	return SetVolumeRequest{
		source,
		volume,
		_request{
			ID_:   getMessageID(),
			Type_: "SetVolume",
		},
	}

}

// ID returns the request's message ID.
func (r SetVolumeRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r SetVolumeRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetVolumeRequest) Send(c Client) (chan SetVolumeResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetVolumeResponse)
	go func() { future <- (<-generic).(SetVolumeResponse) }()
	return future, nil
}

// SetVolumeResponse : Response for SetVolumeRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setvolume
type SetVolumeResponse _response

// ID returns the response's message ID.
func (r SetVolumeResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r SetVolumeResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r SetVolumeResponse) Error() string { return r.Error_ }

// GetMuteRequest : Get the mute status of a specified source.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getmute
type GetMuteRequest struct {
	// The name of the source.
	// Required: Yes.
	Source   string `json:"source"`
	_request `json:",squash"`
}

// NewGetMuteRequest returns a new GetMuteRequest.
func NewGetMuteRequest(source string) GetMuteRequest {
	return GetMuteRequest{
		source,
		_request{
			ID_:   getMessageID(),
			Type_: "GetMute",
		},
	}

}

// ID returns the request's message ID.
func (r GetMuteRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r GetMuteRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetMuteRequest) Send(c Client) (chan GetMuteResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetMuteResponse)
	go func() { future <- (<-generic).(GetMuteResponse) }()
	return future, nil
}

// GetMuteResponse : Response for GetMuteRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getmute
type GetMuteResponse struct {
	// The name of the source.
	// Required: Yes.
	Name string `json:"name"`
	// Mute status of the source.
	// Required: Yes.
	Muted     bool `json:"muted"`
	_response `json:",squash"`
}

// ID returns the response's message ID.
func (r GetMuteResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r GetMuteResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r GetMuteResponse) Error() string { return r.Error_ }

// SetMuteRequest : Sets the mute status of a specified source.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setmute
type SetMuteRequest struct {
	// The name of the source.
	// Required: Yes.
	Source string `json:"source"`
	// Desired mute status.
	// Required: Yes.
	Mute     bool `json:"mute"`
	_request `json:",squash"`
}

// NewSetMuteRequest returns a new SetMuteRequest.
func NewSetMuteRequest(
	source string,
	mute bool,
) SetMuteRequest {
	return SetMuteRequest{
		source,
		mute,
		_request{
			ID_:   getMessageID(),
			Type_: "SetMute",
		},
	}

}

// ID returns the request's message ID.
func (r SetMuteRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r SetMuteRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetMuteRequest) Send(c Client) (chan SetMuteResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetMuteResponse)
	go func() { future <- (<-generic).(SetMuteResponse) }()
	return future, nil
}

// SetMuteResponse : Response for SetMuteRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setmute
type SetMuteResponse _response

// ID returns the response's message ID.
func (r SetMuteResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r SetMuteResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r SetMuteResponse) Error() string { return r.Error_ }

// ToggleMuteRequest : Inverts the mute status of a specified source.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#togglemute
type ToggleMuteRequest struct {
	// The name of the source.
	// Required: Yes.
	Source   string `json:"source"`
	_request `json:",squash"`
}

// NewToggleMuteRequest returns a new ToggleMuteRequest.
func NewToggleMuteRequest(source string) ToggleMuteRequest {
	return ToggleMuteRequest{
		source,
		_request{
			ID_:   getMessageID(),
			Type_: "ToggleMute",
		},
	}

}

// ID returns the request's message ID.
func (r ToggleMuteRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r ToggleMuteRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r ToggleMuteRequest) Send(c Client) (chan ToggleMuteResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan ToggleMuteResponse)
	go func() { future <- (<-generic).(ToggleMuteResponse) }()
	return future, nil
}

// ToggleMuteResponse : Response for ToggleMuteRequest.
// Since obs-websocket version: 4.0.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#togglemute
type ToggleMuteResponse _response

// ID returns the response's message ID.
func (r ToggleMuteResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r ToggleMuteResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r ToggleMuteResponse) Error() string { return r.Error_ }

// SetSyncOffsetRequest : Set the audio sync offset of a specified source.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsyncoffset
type SetSyncOffsetRequest struct {
	// The name of the source.
	// Required: Yes.
	Source string `json:"source"`
	// The desired audio sync offset (in nanoseconds).
	// Required: Yes.
	Offset   int `json:"offset"`
	_request `json:",squash"`
}

// NewSetSyncOffsetRequest returns a new SetSyncOffsetRequest.
func NewSetSyncOffsetRequest(
	source string,
	offset int,
) SetSyncOffsetRequest {
	return SetSyncOffsetRequest{
		source,
		offset,
		_request{
			ID_:   getMessageID(),
			Type_: "SetSyncOffset",
		},
	}

}

// ID returns the request's message ID.
func (r SetSyncOffsetRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r SetSyncOffsetRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetSyncOffsetRequest) Send(c Client) (chan SetSyncOffsetResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetSyncOffsetResponse)
	go func() { future <- (<-generic).(SetSyncOffsetResponse) }()
	return future, nil
}

// SetSyncOffsetResponse : Response for SetSyncOffsetRequest.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsyncoffset
type SetSyncOffsetResponse _response

// ID returns the response's message ID.
func (r SetSyncOffsetResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r SetSyncOffsetResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r SetSyncOffsetResponse) Error() string { return r.Error_ }

// GetSyncOffsetRequest : Get the audio sync offset of a specified source.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsyncoffset
type GetSyncOffsetRequest struct {
	// The name of the source.
	// Required: Yes.
	Source   string `json:"source"`
	_request `json:",squash"`
}

// NewGetSyncOffsetRequest returns a new GetSyncOffsetRequest.
func NewGetSyncOffsetRequest(source string) GetSyncOffsetRequest {
	return GetSyncOffsetRequest{
		source,
		_request{
			ID_:   getMessageID(),
			Type_: "GetSyncOffset",
		},
	}

}

// ID returns the request's message ID.
func (r GetSyncOffsetRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r GetSyncOffsetRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetSyncOffsetRequest) Send(c Client) (chan GetSyncOffsetResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetSyncOffsetResponse)
	go func() { future <- (<-generic).(GetSyncOffsetResponse) }()
	return future, nil
}

// GetSyncOffsetResponse : Response for GetSyncOffsetRequest.
// Since obs-websocket version: 4.2.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsyncoffset
type GetSyncOffsetResponse struct {
	// The name of the source.
	// Required: Yes.
	Name string `json:"name"`
	// The audio sync offset (in nanoseconds).
	// Required: Yes.
	Offset    int `json:"offset"`
	_response `json:",squash"`
}

// ID returns the response's message ID.
func (r GetSyncOffsetResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r GetSyncOffsetResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r GetSyncOffsetResponse) Error() string { return r.Error_ }

// GetSourceSettingsRequest : Get settings of the specified source.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsourcesettings
type GetSourceSettingsRequest struct {
	// Name of the source item.
	// Required: Yes.
	SourceName string `json:"sourceName"`
	// Type of the specified source.
	// Useful for type-checking if you expect a specific settings schema.
	// Required: No.
	SourceType string `json:"sourceType"`
	_request   `json:",squash"`
}

// NewGetSourceSettingsRequest returns a new GetSourceSettingsRequest.
func NewGetSourceSettingsRequest(
	sourceName string,
	sourceType string,
) GetSourceSettingsRequest {
	return GetSourceSettingsRequest{
		sourceName,
		sourceType,
		_request{
			ID_:   getMessageID(),
			Type_: "GetSourceSettings",
		},
	}

}

// ID returns the request's message ID.
func (r GetSourceSettingsRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r GetSourceSettingsRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetSourceSettingsRequest) Send(c Client) (chan GetSourceSettingsResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetSourceSettingsResponse)
	go func() { future <- (<-generic).(GetSourceSettingsResponse) }()
	return future, nil
}

// GetSourceSettingsResponse : Response for GetSourceSettingsRequest.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getsourcesettings
type GetSourceSettingsResponse struct {
	// Source name.
	// Required: Yes.
	SourceName string `json:"sourceName"`
	// Type of the specified source.
	// Required: Yes.
	SourceType string `json:"sourceType"`
	// Source settings.
	// Varying between source types.
	// Required: Yes.
	SourceSettings map[string]interface{} `json:"sourceSettings"`
	_response      `json:",squash"`
}

// ID returns the response's message ID.
func (r GetSourceSettingsResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r GetSourceSettingsResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r GetSourceSettingsResponse) Error() string { return r.Error_ }

// SetSourceSettingsRequest : Set settings of the specified source.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsourcesettings
type SetSourceSettingsRequest struct {
	// Name of the source item.
	// Required: Yes.
	SourceName string `json:"sourceName"`
	// Type of the specified source.
	// Useful for type-checking to avoid settings a set of settings incompatible with the actual source's type.
	// Required: No.
	SourceType string `json:"sourceType"`
	// Source settings.
	// Varying between source types.
	// Required: Yes.
	SourceSettings map[string]interface{} `json:"sourceSettings"`
	_request       `json:",squash"`
}

// NewSetSourceSettingsRequest returns a new SetSourceSettingsRequest.
func NewSetSourceSettingsRequest(
	sourceName string,
	sourceType string,
	sourceSettings map[string]interface{},
) SetSourceSettingsRequest {
	return SetSourceSettingsRequest{
		sourceName,
		sourceType,
		sourceSettings,
		_request{
			ID_:   getMessageID(),
			Type_: "SetSourceSettings",
		},
	}

}

// ID returns the request's message ID.
func (r SetSourceSettingsRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r SetSourceSettingsRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetSourceSettingsRequest) Send(c Client) (chan SetSourceSettingsResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetSourceSettingsResponse)
	go func() { future <- (<-generic).(SetSourceSettingsResponse) }()
	return future, nil
}

// SetSourceSettingsResponse : Response for SetSourceSettingsRequest.
// Since obs-websocket version: 4.3.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setsourcesettings
type SetSourceSettingsResponse struct {
	// Source name.
	// Required: Yes.
	SourceName string `json:"sourceName"`
	// Type of the specified source.
	// Required: Yes.
	SourceType string `json:"sourceType"`
	// Source settings.
	// Varying between source types.
	// Required: Yes.
	SourceSettings map[string]interface{} `json:"sourceSettings"`
	_response      `json:",squash"`
}

// ID returns the response's message ID.
func (r SetSourceSettingsResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r SetSourceSettingsResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r SetSourceSettingsResponse) Error() string { return r.Error_ }

// GetTextGDIPlusPropertiesRequest : Get the current properties of a Text GDI Plus source.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#gettextgdiplusproperties
type GetTextGDIPlusPropertiesRequest struct {
	// Name of the scene to retrieve.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// Name of the source.
	// Required: Yes.
	Source   string `json:"source"`
	_request `json:",squash"`
}

// NewGetTextGDIPlusPropertiesRequest returns a new GetTextGDIPlusPropertiesRequest.
func NewGetTextGDIPlusPropertiesRequest(
	sceneName string,
	source string,
) GetTextGDIPlusPropertiesRequest {
	return GetTextGDIPlusPropertiesRequest{
		sceneName,
		source,
		_request{
			ID_:   getMessageID(),
			Type_: "GetTextGDIPlusProperties",
		},
	}

}

// ID returns the request's message ID.
func (r GetTextGDIPlusPropertiesRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r GetTextGDIPlusPropertiesRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetTextGDIPlusPropertiesRequest) Send(c Client) (chan GetTextGDIPlusPropertiesResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetTextGDIPlusPropertiesResponse)
	go func() { future <- (<-generic).(GetTextGDIPlusPropertiesResponse) }()
	return future, nil
}

// GetTextGDIPlusPropertiesResponse : Response for GetTextGDIPlusPropertiesRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#gettextgdiplusproperties
type GetTextGDIPlusPropertiesResponse struct {
	// Text Alignment ("left", "center", "right").
	// Required: Yes.
	Align string `json:"align"`
	// Background color.
	// Required: Yes.
	BkColor int `json:"bk-color"`
	// Background opacity (0-100).
	// Required: Yes.
	BkOpacity int `json:"bk-opacity"`
	// Chat log.
	// Required: Yes.
	Chatlog bool `json:"chatlog"`
	// Chat log lines.
	// Required: Yes.
	ChatlogLines int `json:"chatlog_lines"`
	// Text color.
	// Required: Yes.
	Color int `json:"color"`
	// Extents wrap.
	// Required: Yes.
	Extents bool `json:"extents"`
	// Extents cx.
	// Required: Yes.
	ExtentsCx int `json:"extents_cx"`
	// Extents cy.
	// Required: Yes.
	ExtentsCy int `json:"extents_cy"`
	// File path name.
	// Required: Yes.
	File string `json:"file"`
	// Read text from the specified file.
	// Required: Yes.
	ReadFromFile bool `json:"read_from_file"`
	// Holds data for the font.
	// Ex: `"font": { "face": "Arial", "flags": 0, "size": 150, "style": "" }`.
	// Required: Yes.
	Font map[string]interface{} `json:"font"`
	// Font face.
	// Required: Yes.
	FontFace string `json:"font.face"`
	// Font text styling flag.
	// `Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8`.
	// Required: Yes.
	FontFlags int `json:"font.flags"`
	// Font text size.
	// Required: Yes.
	FontSize int `json:"font.size"`
	// Font Style (unknown function).
	// Required: Yes.
	FontStyle string `json:"font.style"`
	// Gradient enabled.
	// Required: Yes.
	Gradient bool `json:"gradient"`
	// Gradient color.
	// Required: Yes.
	GradientColor int `json:"gradient_color"`
	// Gradient direction.
	// Required: Yes.
	GradientDir float64 `json:"gradient_dir"`
	// Gradient opacity (0-100).
	// Required: Yes.
	GradientOpacity int `json:"gradient_opacity"`
	// Outline.
	// Required: Yes.
	Outline bool `json:"outline"`
	// Outline color.
	// Required: Yes.
	OutlineColor int `json:"outline_color"`
	// Outline size.
	// Required: Yes.
	OutlineSize int `json:"outline_size"`
	// Outline opacity (0-100).
	// Required: Yes.
	OutlineOpacity int `json:"outline_opacity"`
	// Text content to be displayed.
	// Required: Yes.
	Text string `json:"text"`
	// Text vertical alignment ("top", "center", "bottom").
	// Required: Yes.
	Valign string `json:"valign"`
	// Vertical text enabled.
	// Required: Yes.
	Vertical bool `json:"vertical"`
	// Visibility of the scene item.
	// Required: Yes.
	Render    bool `json:"render"`
	_response `json:",squash"`
}

// ID returns the response's message ID.
func (r GetTextGDIPlusPropertiesResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r GetTextGDIPlusPropertiesResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r GetTextGDIPlusPropertiesResponse) Error() string { return r.Error_ }

// SetTextGDIPlusPropertiesRequest : Get the current properties of a Text GDI Plus source.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#settextgdiplusproperties
type SetTextGDIPlusPropertiesRequest struct {
	// Name of the scene to retrieve.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// Name of the source.
	// Required: Yes.
	Source string `json:"source"`
	// Text Alignment ("left", "center", "right").
	// Required: No.
	Align string `json:"align"`
	// Background color.
	// Required: No.
	BkColor int `json:"bk-color"`
	// Background opacity (0-100).
	// Required: No.
	BkOpacity int `json:"bk-opacity"`
	// Chat log.
	// Required: No.
	Chatlog bool `json:"chatlog"`
	// Chat log lines.
	// Required: No.
	ChatlogLines int `json:"chatlog_lines"`
	// Text color.
	// Required: No.
	Color int `json:"color"`
	// Extents wrap.
	// Required: No.
	Extents bool `json:"extents"`
	// Extents cx.
	// Required: No.
	ExtentsCx int `json:"extents_cx"`
	// Extents cy.
	// Required: No.
	ExtentsCy int `json:"extents_cy"`
	// File path name.
	// Required: No.
	File string `json:"file"`
	// Read text from the specified file.
	// Required: No.
	ReadFromFile bool `json:"read_from_file"`
	// Holds data for the font.
	// Ex: `"font": { "face": "Arial", "flags": 0, "size": 150, "style": "" }`.
	// Required: No.
	Font map[string]interface{} `json:"font"`
	// Font face.
	// Required: No.
	FontFace string `json:"font.face"`
	// Font text styling flag.
	// `Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8`.
	// Required: No.
	FontFlags int `json:"font.flags"`
	// Font text size.
	// Required: No.
	FontSize int `json:"font.size"`
	// Font Style (unknown function).
	// Required: No.
	FontStyle string `json:"font.style"`
	// Gradient enabled.
	// Required: No.
	Gradient bool `json:"gradient"`
	// Gradient color.
	// Required: No.
	GradientColor int `json:"gradient_color"`
	// Gradient direction.
	// Required: No.
	GradientDir float64 `json:"gradient_dir"`
	// Gradient opacity (0-100).
	// Required: No.
	GradientOpacity int `json:"gradient_opacity"`
	// Outline.
	// Required: No.
	Outline bool `json:"outline"`
	// Outline color.
	// Required: No.
	OutlineColor int `json:"outline_color"`
	// Outline size.
	// Required: No.
	OutlineSize int `json:"outline_size"`
	// Outline opacity (0-100).
	// Required: No.
	OutlineOpacity int `json:"outline_opacity"`
	// Text content to be displayed.
	// Required: No.
	Text string `json:"text"`
	// Text vertical alignment ("top", "center", "bottom").
	// Required: No.
	Valign string `json:"valign"`
	// Vertical text enabled.
	// Required: No.
	Vertical bool `json:"vertical"`
	// Visibility of the scene item.
	// Required: No.
	Render   bool `json:"render"`
	_request `json:",squash"`
}

// NewSetTextGDIPlusPropertiesRequest returns a new SetTextGDIPlusPropertiesRequest.
func NewSetTextGDIPlusPropertiesRequest(
	sceneName string,
	source string,
	align string,
	bkColor int,
	bkOpacity int,
	chatlog bool,
	chatlogLines int,
	color int,
	extents bool,
	extentsCx int,
	extentsCy int,
	file string,
	readFromFile bool,
	font map[string]interface{},
	fontFace string,
	fontFlags int,
	fontSize int,
	fontStyle string,
	gradient bool,
	gradientColor int,
	gradientDir float64,
	gradientOpacity int,
	outline bool,
	outlineColor int,
	outlineSize int,
	outlineOpacity int,
	text string,
	valign string,
	vertical bool,
	render bool,
) SetTextGDIPlusPropertiesRequest {
	return SetTextGDIPlusPropertiesRequest{
		sceneName,
		source,
		align,
		bkColor,
		bkOpacity,
		chatlog,
		chatlogLines,
		color,
		extents,
		extentsCx,
		extentsCy,
		file,
		readFromFile,
		font,
		fontFace,
		fontFlags,
		fontSize,
		fontStyle,
		gradient,
		gradientColor,
		gradientDir,
		gradientOpacity,
		outline,
		outlineColor,
		outlineSize,
		outlineOpacity,
		text,
		valign,
		vertical,
		render,
		_request{
			ID_:   getMessageID(),
			Type_: "SetTextGDIPlusProperties",
		},
	}

}

// ID returns the request's message ID.
func (r SetTextGDIPlusPropertiesRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r SetTextGDIPlusPropertiesRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetTextGDIPlusPropertiesRequest) Send(c Client) (chan SetTextGDIPlusPropertiesResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetTextGDIPlusPropertiesResponse)
	go func() { future <- (<-generic).(SetTextGDIPlusPropertiesResponse) }()
	return future, nil
}

// SetTextGDIPlusPropertiesResponse : Response for SetTextGDIPlusPropertiesRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#settextgdiplusproperties
type SetTextGDIPlusPropertiesResponse _response

// ID returns the response's message ID.
func (r SetTextGDIPlusPropertiesResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r SetTextGDIPlusPropertiesResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r SetTextGDIPlusPropertiesResponse) Error() string { return r.Error_ }

// GetBrowserSourcePropertiesRequest : Get current properties for a Browser Source.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getbrowsersourceproperties
type GetBrowserSourcePropertiesRequest struct {
	// Name of the scene that the source belongs to.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// Name of the source.
	// Required: Yes.
	Source   string `json:"source"`
	_request `json:",squash"`
}

// NewGetBrowserSourcePropertiesRequest returns a new GetBrowserSourcePropertiesRequest.
func NewGetBrowserSourcePropertiesRequest(
	sceneName string,
	source string,
) GetBrowserSourcePropertiesRequest {
	return GetBrowserSourcePropertiesRequest{
		sceneName,
		source,
		_request{
			ID_:   getMessageID(),
			Type_: "GetBrowserSourceProperties",
		},
	}

}

// ID returns the request's message ID.
func (r GetBrowserSourcePropertiesRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r GetBrowserSourcePropertiesRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetBrowserSourcePropertiesRequest) Send(c Client) (chan GetBrowserSourcePropertiesResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetBrowserSourcePropertiesResponse)
	go func() { future <- (<-generic).(GetBrowserSourcePropertiesResponse) }()
	return future, nil
}

// GetBrowserSourcePropertiesResponse : Response for GetBrowserSourcePropertiesRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getbrowsersourceproperties
type GetBrowserSourcePropertiesResponse struct {
	// Indicates that a local file is in use.
	// Required: Yes.
	IsLocalFile bool `json:"is_local_file"`
	// file path.
	// Required: Yes.
	LocalFile string `json:"local_file"`
	// Url.
	// Required: Yes.
	Url string `json:"url"`
	// CSS to inject.
	// Required: Yes.
	Css string `json:"css"`
	// Width.
	// Required: Yes.
	Width int `json:"width"`
	// Height.
	// Required: Yes.
	Height int `json:"height"`
	// Framerate.
	// Required: Yes.
	FPS int `json:"fps"`
	// Indicates whether the source should be shutdown when not visible.
	// Required: Yes.
	Shutdown bool `json:"shutdown"`
	// Visibility of the scene item.
	// Required: No.
	Render    bool `json:"render"`
	_response `json:",squash"`
}

// ID returns the response's message ID.
func (r GetBrowserSourcePropertiesResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r GetBrowserSourcePropertiesResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r GetBrowserSourcePropertiesResponse) Error() string { return r.Error_ }

// SetBrowserSourcePropertiesRequest : Set current properties for a Browser Source.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setbrowsersourceproperties
type SetBrowserSourcePropertiesRequest struct {
	// Name of the scene that the source belongs to.
	// Defaults to the current scene.
	// Required: No.
	SceneName string `json:"scene-name"`
	// Name of the source.
	// Required: Yes.
	Source string `json:"source"`
	// Indicates that a local file is in use.
	// Required: No.
	IsLocalFile bool `json:"is_local_file"`
	// file path.
	// Required: No.
	LocalFile string `json:"local_file"`
	// Url.
	// Required: No.
	Url string `json:"url"`
	// CSS to inject.
	// Required: No.
	Css string `json:"css"`
	// Width.
	// Required: No.
	Width int `json:"width"`
	// Height.
	// Required: No.
	Height int `json:"height"`
	// Framerate.
	// Required: No.
	FPS int `json:"fps"`
	// Indicates whether the source should be shutdown when not visible.
	// Required: No.
	Shutdown bool `json:"shutdown"`
	// Visibility of the scene item.
	// Required: No.
	Render   bool `json:"render"`
	_request `json:",squash"`
}

// NewSetBrowserSourcePropertiesRequest returns a new SetBrowserSourcePropertiesRequest.
func NewSetBrowserSourcePropertiesRequest(
	sceneName string,
	source string,
	isLocalFile bool,
	localFile string,
	url string,
	css string,
	width int,
	height int,
	fps int,
	shutdown bool,
	render bool,
) SetBrowserSourcePropertiesRequest {
	return SetBrowserSourcePropertiesRequest{
		sceneName,
		source,
		isLocalFile,
		localFile,
		url,
		css,
		width,
		height,
		fps,
		shutdown,
		render,
		_request{
			ID_:   getMessageID(),
			Type_: "SetBrowserSourceProperties",
		},
	}

}

// ID returns the request's message ID.
func (r SetBrowserSourcePropertiesRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r SetBrowserSourcePropertiesRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r SetBrowserSourcePropertiesRequest) Send(c Client) (chan SetBrowserSourcePropertiesResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetBrowserSourcePropertiesResponse)
	go func() { future <- (<-generic).(SetBrowserSourcePropertiesResponse) }()
	return future, nil
}

// SetBrowserSourcePropertiesResponse : Response for SetBrowserSourcePropertiesRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setbrowsersourceproperties
type SetBrowserSourcePropertiesResponse _response

// ID returns the response's message ID.
func (r SetBrowserSourcePropertiesResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r SetBrowserSourcePropertiesResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r SetBrowserSourcePropertiesResponse) Error() string { return r.Error_ }

// GetSpecialSourcesRequest : Get configured special sources like Desktop Audio and Mic/Aux sources.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getspecialsources
type GetSpecialSourcesRequest _request

// NewGetSpecialSourcesRequest returns a new GetSpecialSourcesRequest.
func NewGetSpecialSourcesRequest() GetSpecialSourcesRequest {
	return GetSpecialSourcesRequest{ID_: getMessageID(), Type_: "GetSpecialSources"}
}

// ID returns the request's message ID.
func (r GetSpecialSourcesRequest) ID() string { return r.ID_ }

// Type returns the request's message type.
func (r GetSpecialSourcesRequest) Type() string { return r.Type_ }

// Send sends the request and returns a channel to which the response will be sent.
func (r GetSpecialSourcesRequest) Send(c Client) (chan GetSpecialSourcesResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetSpecialSourcesResponse)
	go func() { future <- (<-generic).(GetSpecialSourcesResponse) }()
	return future, nil
}

// GetSpecialSourcesResponse : Response for GetSpecialSourcesRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getspecialsources
type GetSpecialSourcesResponse struct {
	// Name of the first Desktop Audio capture source.
	// Required: No.
	Desktop1 string `json:"desktop-1"`
	// Name of the second Desktop Audio capture source.
	// Required: No.
	Desktop2 string `json:"desktop-2"`
	// Name of the first Mic/Aux input source.
	// Required: No.
	Mic1 string `json:"mic-1"`
	// Name of the second Mic/Aux input source.
	// Required: No.
	Mic2 string `json:"mic-2"`
	// NAme of the third Mic/Aux input source.
	// Required: No.
	Mic3      string `json:"mic-3"`
	_response `json:",squash"`
}

// ID returns the response's message ID.
func (r GetSpecialSourcesResponse) ID() string { return r.ID_ }

// Status returns the response's status.
func (r GetSpecialSourcesResponse) Status() string { return r.Status_ }

// Error returns the response's error.
func (r GetSpecialSourcesResponse) Error() string { return r.Error_ }
