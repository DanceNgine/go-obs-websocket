package obsws

// This file is automatically generated.
// https://github.com/christopher-dG/go-obs-websocket/blob/master/codegen/protocol.py

// GetStudioModeStatusRequest : Indicates if Studio Mode is currently enabled.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getstudiomodestatus
type GetStudioModeStatusRequest struct{ _request }

// NewGetStudioModeStatusRequest returns a new GetStudioModeStatusRequest.
func NewGetStudioModeStatusRequest() GetStudioModeStatusRequest {
	return GetStudioModeStatusRequest{_request{
		ID_:   getMessageID(),
		Type_: "GetStudioModeStatus",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r GetStudioModeStatusRequest) Send(c Client) (chan GetStudioModeStatusResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetStudioModeStatusResponse)
	go func() { future <- (<-generic).(GetStudioModeStatusResponse) }()
	return future, nil
}

// GetStudioModeStatusResponse : Response for GetStudioModeStatusRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getstudiomodestatus
type GetStudioModeStatusResponse struct {
	// Indicates if Studio Mode is enabled.
	// Required: Yes.
	StudioMode bool `json:"studio-mode"`
	_response  `json:",squash"`
}

// GetPreviewSceneRequest : Get the name of the currently previewed scene and its list of sources.
// Will return an `error` if Studio Mode is not enabled.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getpreviewscene
type GetPreviewSceneRequest struct{ _request }

// NewGetPreviewSceneRequest returns a new GetPreviewSceneRequest.
func NewGetPreviewSceneRequest() GetPreviewSceneRequest {
	return GetPreviewSceneRequest{_request{
		ID_:   getMessageID(),
		Type_: "GetPreviewScene",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r GetPreviewSceneRequest) Send(c Client) (chan GetPreviewSceneResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan GetPreviewSceneResponse)
	go func() { future <- (<-generic).(GetPreviewSceneResponse) }()
	return future, nil
}

// GetPreviewSceneResponse : Response for GetPreviewSceneRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#getpreviewscene
type GetPreviewSceneResponse struct {
	// The name of the active preview scene.
	// Required: Yes.
	Name string `json:"name"`
	// Required: Yes.
	Sources   []map[string]interface{} `json:"sources"`
	_response `json:",squash"`
}

// SetPreviewSceneRequest : Set the active preview scene.
// Will return an `error` if Studio Mode is not enabled.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setpreviewscene
type SetPreviewSceneRequest struct {
	// The name of the scene to preview.
	// Required: Yes.
	SceneName string `json:"scene-name"`
	_request  `json:",squash"`
}

// NewSetPreviewSceneRequest returns a new SetPreviewSceneRequest.
func NewSetPreviewSceneRequest(sceneName string) SetPreviewSceneRequest {
	return SetPreviewSceneRequest{
		sceneName,
		_request{
			ID_:   getMessageID(),
			Type_: "SetPreviewScene",
		},
	}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r SetPreviewSceneRequest) Send(c Client) (chan SetPreviewSceneResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan SetPreviewSceneResponse)
	go func() { future <- (<-generic).(SetPreviewSceneResponse) }()
	return future, nil
}

// SetPreviewSceneResponse : Response for SetPreviewSceneRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#setpreviewscene
type SetPreviewSceneResponse struct {
	_response `json:",squash"`
}

// TransitionToProgramRequest : Transitions the currently previewed scene to the main output.
// Will return an `error` if Studio Mode is not enabled.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#transitiontoprogram
type TransitionToProgramRequest struct {
	// Change the active transition before switching scenes.
	// Defaults to the active transition.
	// Required: No.
	WithTransition map[string]interface{} `json:"with-transition"`
	// Name of the transition.
	// Required: Yes.
	WithTransitionName string `json:"with-transition.name"`
	// Transition duration (in milliseconds).
	// Required: No.
	WithTransitionDuration int `json:"with-transition.duration"`
	_request               `json:",squash"`
}

// NewTransitionToProgramRequest returns a new TransitionToProgramRequest.
func NewTransitionToProgramRequest(
	withTransition map[string]interface{},
	withTransitionName string,
	withTransitionDuration int,
) TransitionToProgramRequest {
	return TransitionToProgramRequest{
		withTransition,
		withTransitionName,
		withTransitionDuration,
		_request{
			ID_:   getMessageID(),
			Type_: "TransitionToProgram",
		},
	}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r TransitionToProgramRequest) Send(c Client) (chan TransitionToProgramResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan TransitionToProgramResponse)
	go func() { future <- (<-generic).(TransitionToProgramResponse) }()
	return future, nil
}

// TransitionToProgramResponse : Response for TransitionToProgramRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#transitiontoprogram
type TransitionToProgramResponse struct {
	_response `json:",squash"`
}

// EnableStudioModeRequest : Enables Studio Mode.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#enablestudiomode
type EnableStudioModeRequest struct{ _request }

// NewEnableStudioModeRequest returns a new EnableStudioModeRequest.
func NewEnableStudioModeRequest() EnableStudioModeRequest {
	return EnableStudioModeRequest{_request{
		ID_:   getMessageID(),
		Type_: "EnableStudioMode",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r EnableStudioModeRequest) Send(c Client) (chan EnableStudioModeResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan EnableStudioModeResponse)
	go func() { future <- (<-generic).(EnableStudioModeResponse) }()
	return future, nil
}

// EnableStudioModeResponse : Response for EnableStudioModeRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#enablestudiomode
type EnableStudioModeResponse struct {
	_response `json:",squash"`
}

// DisableStudioModeRequest : Disables Studio Mode.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#disablestudiomode
type DisableStudioModeRequest struct{ _request }

// NewDisableStudioModeRequest returns a new DisableStudioModeRequest.
func NewDisableStudioModeRequest() DisableStudioModeRequest {
	return DisableStudioModeRequest{_request{
		ID_:   getMessageID(),
		Type_: "DisableStudioMode",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r DisableStudioModeRequest) Send(c Client) (chan DisableStudioModeResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan DisableStudioModeResponse)
	go func() { future <- (<-generic).(DisableStudioModeResponse) }()
	return future, nil
}

// DisableStudioModeResponse : Response for DisableStudioModeRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#disablestudiomode
type DisableStudioModeResponse struct {
	_response `json:",squash"`
}

// ToggleStudioModeRequest : Toggles Studio Mode.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#togglestudiomode
type ToggleStudioModeRequest struct{ _request }

// NewToggleStudioModeRequest returns a new ToggleStudioModeRequest.
func NewToggleStudioModeRequest() ToggleStudioModeRequest {
	return ToggleStudioModeRequest{_request{
		ID_:   getMessageID(),
		Type_: "ToggleStudioMode",
	}}
}

// Send sends the request and returns a channel to which the response will be sent.
func (r ToggleStudioModeRequest) Send(c Client) (chan ToggleStudioModeResponse, error) {
	generic, err := c.SendRequest(r)
	if err != nil {
		return nil, err
	}
	future := make(chan ToggleStudioModeResponse)
	go func() { future <- (<-generic).(ToggleStudioModeResponse) }()
	return future, nil
}

// ToggleStudioModeResponse : Response for ToggleStudioModeRequest.
// Since obs-websocket version: 4.1.0.
// https://github.com/Palakis/obs-websocket/blob/master/docs/generated/protocol.md#togglestudiomode
type ToggleStudioModeResponse struct {
	_response `json:",squash"`
}
